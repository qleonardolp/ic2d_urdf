<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="IC2D">

    <!-- Useful Macros -->

    <xacro:macro name="include_geometry_file" params="filename">
        <geometry>
            <mesh filename="$(find ic2d_urdf)/meshes/${filename}.STL" scale="0.001 0.001 0.001"/>
        </geometry>
    </xacro:macro>

    <xacro:macro name="inertial_box" params="mass dx dy dz *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (dy*dy+dz*dz)}" ixy="0.0" ixz="0.0"
                     iyy="${(1/12) * mass * (dx*dx+dz*dz)}" iyz="0.0"
                     izz="${(1/12) * mass * (dx*dx+dy*dy)}" />
        </inertial>
    </xacro:macro>

    <!-- Specify some colours -->
    <material name="nickel">
        <color rgba="${193/255} ${183/255} ${131/255} 1"/>
    </material>
    
    <!-- This first link called "world" is empty -->
    
    <link name="world"></link>

    <joint name="slider_joint" type="prismatic">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <parent link="world"/>
        <child link="base_link"/>
        <axis xyz="1 0 0"/>
        <limit lower="${-pi/2}" upper="${pi/2}" velocity="340" effort="5000"/> 
    </joint>

    <link name="base_link">
        <xacro:property name="base_global_mass" value="90.27" />
        <xacro:property name="base_global_length" value="1.305" />
        <xacro:property name="base_global_height" value="0.0254" />
        <xacro:property name="base_global_width" value="0.355" />

        <xacro:property name="link_origin">
            <origin xyz="0 0 ${base_global_height/2}" rpy="${pi/2} 0 0" />
        </xacro:property>

        <visual>
            <origin xyz="${-base_global_width/2} ${base_global_length/2} 0" rpy="${pi/2} 0 0" />
            <xacro:include_geometry_file filename="base_global"/>
            <material name="nickel" />
        </visual>

        <collision>
            <xacro:insert_block name="link_origin" />
            <geometry>
                <box size="${base_global_width*0.95} ${base_global_height*0.95} ${base_global_length*0.95}" />
            </geometry>
        </collision>

        <xacro:inertial_box mass="${base_global_mass}" dx="${base_global_width}" 
                            dy="${base_global_height}" dz="${base_global_length}">
                                <xacro:insert_block name="link_origin" />
        </xacro:inertial_box>

    </link>


    <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->

    <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). -->

    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so">
            <update_rate>20</update_rate>
            <joint_name>slider_joint</joint_name>
        </plugin>
    </gazebo>

    <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
    <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
    <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: world}, joint_names: [slider_joint, arm_joint], points: [  {positions: {0.8,0.6}} ]}' -->
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory"
            filename="libgazebo_ros_joint_pose_trajectory.so">
            <update_rate>2</update_rate>
        </plugin>
    </gazebo>

</robot>
